import streamlit as st
import pandas as pd
import re
import pytesseract
from pdf2image import convert_from_path
from openpyxl import Workbook, load_workbook
from PIL import Image, ImageEnhance
import os
import io

def enhance_image_for_ocr(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR"""
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° sharpness
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(1.5)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° brightness ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    enhancer = ImageEnhance.Brightness(image)
    image = enhancer.enhance(1.1)
    
    return image

def extract_ocr_from_pdf(pdf_bytes):
    """‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô OCR Text ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á text ‡πÅ‡∏•‡∏∞ images"""
    temp_file = "temp_upload.pdf"
    try:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open(temp_file, "wb") as f:
            f.write(pdf_bytes)
        
        st.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        
        # ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        pages = convert_from_path(temp_file, dpi=400)
        
        ocr_results = []
        processed_images = []
        
        for i, page in enumerate(pages):
            st.info(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{len(pages)}...")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            enhanced_page = enhance_image_for_ocr(page)
            processed_images.append(enhanced_page)
            
            # ‡∏ó‡∏≥ OCR
            ocr_text = pytesseract.image_to_string(
                enhanced_page,
                lang="tha+eng",
                config='--psm 6 --oem 3'
            )
            
            ocr_results.append({
                'page_number': i + 1,
                'ocr_text': ocr_text,
                'image': enhanced_page
            })
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(temp_file)
        
        return ocr_results
        
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á PDF: {str(e)}")
        return []

def extract_data_from_ocr_text(text):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR"""
    data = {
        'date': '',
        'invoice_number': '',
        'amount': '',
        'raw_matches': {}
    }
    
    # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YY
    date_pattern = r'(\d{1,2}/\d{1,2}/\d{2,4})'
    date_matches = re.findall(date_pattern, text)
    if date_matches:
        data['date'] = date_matches[0]
        data['raw_matches']['dates_found'] = date_matches
    
    # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç HH
    invoice_pattern = r'(HH\d{6,8})'
    invoice_matches = re.findall(invoice_pattern, text)
    if invoice_matches:
        data['invoice_number'] = invoice_matches[0]
        data['raw_matches']['invoices_found'] = invoice_matches
    
    # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    amount_patterns = [
        r'‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\s*:?\s*([,\d]+\.?\d{0,2})',  # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: 4710.28
        r'Product\s*Value\s*:?\s*([,\d]+\.?\d{0,2})',  # Product Value: 4710.28
        r'(\d{1,3}(?:,\d{3})*\.\d{2})',  # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4,710.28 ‡∏´‡∏£‡∏∑‡∏≠ 4710.28
    ]
    
    all_amounts = []
    for pattern in amount_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        all_amounts.extend(matches)
    
    if all_amounts:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        valid_amounts = []
        for amount in all_amounts:
            clean_amount = amount.replace(',', '')
            try:
                float_amount = float(clean_amount)
                if 100 <= float_amount <= 1000000:  # ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    valid_amounts.append(amount)
            except ValueError:
                continue
        
        if valid_amounts:
            data['amount'] = valid_amounts[0]
        data['raw_matches']['amounts_found'] = all_amounts
    
    return data

def create_excel_template():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel Template"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Invoice_Data"
    
    # Header
    headers = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
    for col, header in enumerate(headers, 1):
        ws.cell(row=1, column=col, value=header)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def fill_excel_with_data(data_list):
    """‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Invoice_Data"
    
    # Header
    headers = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
    for col, header in enumerate(headers, 1):
        ws.cell(row=1, column=col, value=header)
    
    # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for row_idx, data in enumerate(data_list, start=2):
        ws.cell(row=row_idx, column=1, value=row_idx-1)  # ‡∏•‡∏≥‡∏î‡∏±‡∏ö
        ws.cell(row=row_idx, column=2, value=data['date'])  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        ws.cell(row=row_idx, column=3, value=data['invoice_number'])  # ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•
        ws.cell(row=row_idx, column=4, value=data['amount'])  # ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def main():
    st.set_page_config(
        page_title="PDF OCR Checker & Excel Filler", 
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üîç PDF OCR Checker & Excel Data Filler")
    st.markdown("**‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OCR ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel**")
    st.markdown("---")
    
    # Initialize session state
    if 'ocr_results' not in st.session_state:
        st.session_state.ocr_results = []
    if 'extracted_data' not in st.session_state:
        st.session_state.extracted_data = []
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        st.markdown("""
        1. üìÅ **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF**
        2. üëÅÔ∏è **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OCR**
        3. ‚úèÔ∏è **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)**
        4. üíæ **‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel**
        """)
        
        st.markdown("---")
        st.markdown("### üéØ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
        st.markdown("""
        - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** 01/08/68
        - **‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:** HH6800470  
        - **‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤:** 4710.28
        """)
    
    # Step 1: Upload PDF
    st.header("üìÅ Step 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF")
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF", 
        type="pdf",
        help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô OCR"
    )
    
    if uploaded_file is not None:
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}")
        
        # Step 2: Convert to OCR
        st.header("üîÑ Step 2: ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô OCR")
        
        col1, col2 = st.columns([1, 4])
        with col1:
            if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á OCR", type="primary"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                    pdf_bytes = uploaded_file.getvalue()
                    st.session_state.ocr_results = extract_ocr_from_pdf(pdf_bytes)
                
                if st.session_state.ocr_results:
                    st.success(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {len(st.session_state.ocr_results)}")
        
        # Step 3: Display OCR Results
        if st.session_state.ocr_results:
            st.header("üëÅÔ∏è Step 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
            for result in st.session_state.ocr_results:
                with st.expander(f"üìÑ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {result['page_number']}", expanded=True):
                    
                    col1, col2 = st.columns([1, 1])
                    
                    with col1:
                        st.subheader("üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß:")
                        st.image(result['image'], use_container_width=True)
                    
                    with col2:
                        st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OCR:")
                        st.text_area(
                            "OCR Text:", 
                            result['ocr_text'], 
                            height=300,
                            key=f"ocr_text_{result['page_number']}"
                        )
                        
                        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OCR
                        extracted = extract_data_from_ocr_text(result['ocr_text'])
                        
                        st.subheader("üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
                        date_value = st.text_input(
                            "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:", 
                            value=extracted['date'],
                            key=f"date_{result['page_number']}"
                        )
                        
                        invoice_value = st.text_input(
                            "üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•:", 
                            value=extracted['invoice_number'],
                            key=f"invoice_{result['page_number']}"
                        )
                        
                        amount_value = st.text_input(
                            "üí∞ ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT:", 
                            value=extracted['amount'],
                            key=f"amount_{result['page_number']}"
                        )
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)
                        if extracted['raw_matches']:
                            with st.expander("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö (Debug)"):
                                st.json(extracted['raw_matches'])
                        
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
                        if st.button(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ {result['page_number']}", key=f"save_{result['page_number']}"):
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            existing_index = None
                            for i, data in enumerate(st.session_state.extracted_data):
                                if data['page_number'] == result['page_number']:
                                    existing_index = i
                                    break
                            
                            page_data = {
                                'page_number': result['page_number'],
                                'date': date_value,
                                'invoice_number': invoice_value,
                                'amount': amount_value
                            }
                            
                            if existing_index is not None:
                                st.session_state.extracted_data[existing_index] = page_data
                            else:
                                st.session_state.extracted_data.append(page_data)
                            
                            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ {result['page_number']} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            
            # Step 4: Create Excel
            if st.session_state.extracted_data:
                st.header("üíæ Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á Excel
                st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á Excel:")
                
                summary_data = []
                for data in st.session_state.extracted_data:
                    summary_data.append({
                        '‡∏´‡∏ô‡πâ‡∏≤': data['page_number'],
                        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': data['date'],
                        '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': data['invoice_number'],
                        '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': data['amount']
                    })
                
                df_summary = pd.DataFrame(summary_data)
                st.dataframe(df_summary, use_container_width=True)
                
                # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
                col1, col2 = st.columns([3, 1])
                
                with col2:
                    excel_file = fill_excel_with_data(st.session_state.extracted_data)
                    
                    st.download_button(
                        label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
                        data=excel_file,
                        file_name=f"Invoice_Data_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary",
                        use_container_width=True
                    )
                
                with col1:
                    st.info(f"üìä ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(st.session_state.extracted_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    else:
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        # ‡πÅ‡∏™‡∏î‡∏á Template Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        st.header("üìã ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template")
        template_file = create_excel_template()
        
        st.download_button(
            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template",
            data=template_file,
            file_name="Invoice_Template.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == "__main__":
    main()
