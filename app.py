import streamlit as st
import pandas as pd
import re
import pytesseract
from pdf2image import convert_from_path
from openpyxl import Workbook
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import os
import io

# =========================================================
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud
# =========================================================
try:
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
except Exception:
    pass

def optimize_image_for_ocr(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    try:
        # 1. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
        if image.mode != 'L':
            image = image.convert('L')
        
        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û 2 ‡πÄ‡∏ó‡πà‡∏≤ (‡∏ó‡∏≥‡πÉ‡∏´‡πâ OCR ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
        width, height = image.size
        image = image.resize((width * 2, height * 2), Image.LANCZOS)
        
        # 3. Auto contrast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        image = ImageOps.autocontrast(image, cutoff=3)
        
        # 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏°‡∏≤‡∏Å
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(3.0)
        
        # 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast ‡∏™‡∏π‡∏á
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.8)
        
        # 6. Apply sharpen filter
        image = image.filter(ImageFilter.SHARPEN)
        
        # 7. ‡∏õ‡∏£‡∏±‡∏ö brightness ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(1.15)
        
        return image
    except Exception as e:
        st.warning(f"Image optimization warning: {e}")
        return image

def extract_invoice_data_precise(ocr_text):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡∏ï‡∏≤‡∏° pattern ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"""
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î text ‡∏Å‡πà‡∏≠‡∏ô
    clean_text = re.sub(r'\s+', ' ', ocr_text.strip())
    
    result = {
        'date': '',
        'invoice_number': '',
        'amount': '',
        'confidence': 0
    }
    
    # === 1. ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: DD/MM/YY Pattern ===
    date_patterns = [
        r'\b(\d{2}/\d{2}/68)\b',           # XX/XX/68 (‡∏õ‡∏µ 68 ‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
        r'\b(\d{1,2}/\d{1,2}/68)\b',       # X/XX/68 ‡∏´‡∏£‡∏∑‡∏≠ XX/X/68
        r'(\d{2}/08/68)',                  # XX/08/68 (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 08)
        r'(\d{2}/\d{2}/\d{2})',            # XX/XX/XX ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    ]
    
    for pattern in date_patterns:
        matches = re.findall(pattern, clean_text)
        if matches:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô format ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            for date_match in matches:
                if '08/68' in date_match or len(date_match.split('/')) == 3:
                    result['date'] = date_match
                    result['confidence'] += 30
                    break
            if result['date']:
                break
    
    # === 2. ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: HH6800XXX Pattern ===
    invoice_patterns = [
        r'\b(HH68004\d{2})\b',            # HH68004XX (‡∏ï‡∏≤‡∏° pattern ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
        r'\b(HH68005\d{2})\b',            # HH68005XX
        r'\b(HH6800\d{3})\b',             # HH6800XXX
        r'(HH\d{7,8})',                   # HH + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 7-8 ‡∏´‡∏•‡∏±‡∏Å
    ]
    
    for pattern in invoice_patterns:
        matches = re.findall(pattern, clean_text)
        if matches:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á pattern
            best_invoice = max(matches, key=len) if matches else ''
            if len(best_invoice) >= 9:  # HH + 7 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
                result['invoice_number'] = best_invoice
                result['confidence'] += 30
                break
    
    # === 3. ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: XXXXX.XX Pattern ===
    # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏Å‡∏î‡πå: 4710.28, 16549.53, 17433.64, etc.
    amount_patterns = [
        # Pattern ‡∏´‡∏•‡∏±‡∏Å: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4-5 ‡∏´‡∏•‡∏±‡∏Å ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ .XX
        r'\b(\d{4,5}\.\d{2})\b',
        
        # Pattern ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡∏°‡∏µ comma ‡∏Ñ‡∏±‡πà‡∏ô
        r'\b(\d{1,2},\d{3}\.\d{2})\b',
        
        # Pattern ‡πÄ‡∏â‡∏û‡∏≤‡∏∞: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
        r'(?:‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤|Value|‡∏£‡∏ß‡∏°|Total|Net)[^0-9]*?(\d{4,5}\.\d{2})',
        
        # Pattern ‡πÉ‡∏Å‡∏•‡πâ VAT
        r'(\d{4,5}\.\d{2})\s*(?:‡∏ö‡∏≤‡∏ó|VAT|7\.00)',
        
        # Pattern ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        r'(\d{3,6}\.\d{2})',
    ]
    
    found_amounts = []
    
    for i, pattern in enumerate(amount_patterns):
        matches = re.findall(pattern, clean_text, re.IGNORECASE)
        for match in matches:
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            clean_amount = match.replace(',', '')
            try:
                amount_value = float(clean_amount)
                # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                if 1000 <= amount_value <= 50000:  # ‡∏ä‡πà‡∏ß‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
                    found_amounts.append({
                        'amount': clean_amount,
                        'value': amount_value,
                        'priority': i,  # pattern ‡∏ó‡∏µ‡πà‡∏û‡∏ö
                        'raw': match
                    })
            except ValueError:
                continue
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if found_amounts:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority ‡∏Ç‡∏≠‡∏á pattern ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        found_amounts.sort(key=lambda x: (x['priority'], -x['value']))
        best_amount = found_amounts[0]
        
        result['amount'] = best_amount['amount']
        result['confidence'] += 40
    
    return result

def process_pdf_ultra_fast(pdf_bytes):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"""
    temp_file = "temp_pdf.pdf"
    
    try:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open(temp_file, "wb") as f:
            f.write(pdf_bytes)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        status_text.text("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        
        # ‡πÅ‡∏õ‡∏•‡∏á PDF ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á
        pages = convert_from_path(temp_file, dpi=400, fmt='PNG')
        
        results = []
        total_pages = len(pages)
        
        for i, page in enumerate(pages):
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress
            progress = (i + 1) / total_pages
            progress_bar.progress(progress)
            status_text.text(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{total_pages}")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            optimized_image = optimize_image_for_ocr(page)
            
            # OCR ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            ocr_texts = []
            
            # Config 1: ‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            try:
                text1 = pytesseract.image_to_string(
                    optimized_image,
                    lang="tha+eng",
                    config="--psm 6 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz/.-:‡∏Å-‡πô "
                )
                ocr_texts.append(text1)
            except:
                pass
            
            # Config 2: ‡πÄ‡∏ô‡πâ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            try:
                text2 = pytesseract.image_to_string(
                    optimized_image,
                    lang="tha+eng",
                    config="--psm 4 --oem 3"
                )
                ocr_texts.append(text2)
            except:
                pass
            
            # ‡∏£‡∏ß‡∏° text ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            combined_text = " ".join(ocr_texts)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            extracted_data = extract_invoice_data_precise(combined_text)
            extracted_data['page_number'] = i + 1
            extracted_data['raw_text'] = combined_text[:500]  # ‡πÄ‡∏Å‡πá‡∏ö text ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏ß‡πâ debug
            
            results.append(extracted_data)
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(temp_file)
        
        # Clear progress
        progress_bar.empty()
        status_text.empty()
        
        return results
        
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return []

def create_final_excel(data_list, filename):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    df_data = []
    for i, data in enumerate(data_list, 1):
        df_data.append({
            '‡∏•‡∏≥‡∏î‡∏±‡∏ö': i,
            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': data['date'],
            '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': data['invoice_number'], 
            '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': data['amount']
        })
    
    df = pd.DataFrame(df_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # Sheet ‡∏´‡∏•‡∏±‡∏Å
        df.to_excel(writer, sheet_name='Invoice_Data', index=False)
        
        # Sheet ‡∏™‡∏£‡∏∏‡∏õ
        summary_data = {
            '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': [
                '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà',
                '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
                '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
            ],
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏Ñ‡πà‡∏≤': [
                len(df_data),
                len([d for d in data_list if d['date']]),
                len([d for d in data_list if d['invoice_number']]),
                len([d for d in data_list if d['amount']]),
                sum([float(d['amount']) for d in data_list if d['amount']]) if any(d['amount'] for d in data_list) else 0
            ]
        }
        
        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name='Summary', index=False)
    
    output.seek(0)
    return output

def main():
    st.set_page_config(
        page_title="Ultra-Fast Invoice Extractor",
        page_icon="‚ö°",
        layout="wide"
    )
    
    # Header
    st.title("‚ö° Ultra-Fast PDF Invoice Extractor")
    st.markdown("**‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° - ‡πÑ‡∏î‡πâ Excel ‡πÄ‡∏•‡∏¢ | ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢**")
    st.markdown("---")
    
    # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡πÜ
    with st.container():
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.info("üìã **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:** ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‚Üí ‡∏Å‡∏î '‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' ‚Üí ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel ‚úÖ")
    
    # Main area
    st.header("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF")
    
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à",
        type="pdf",
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤"
    )
    
    if uploaded_file is not None:
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            file_size = len(uploaded_file.getvalue()) / (1024 * 1024)
            st.metric("‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå", f"{file_size:.1f} MB")
        
        with col2:
            st.metric("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‚úÖ")
        
        with col3:
            # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
            if st.button(
                "üöÄ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Excel", 
                type="primary", 
                use_container_width=True,
                help="‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            ):
                
                with st.spinner("‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI OCR..."):
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF
                    pdf_bytes = uploaded_file.getvalue()
                    results = process_pdf_ultra_fast(pdf_bytes)
                
                if results:
                    st.success(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(results)} ‡∏´‡∏ô‡πâ‡∏≤")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    st.subheader("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
                    
                    preview_data = []
                    for i, result in enumerate(results[:5], 1):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                        preview_data.append({
                            '‡∏´‡∏ô‡πâ‡∏≤': i,
                            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': result['date'] or '‚ùå',
                            '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': result['invoice_number'] or '‚ùå',
                            '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': result['amount'] or '‚ùå',
                            '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥': f"{result['confidence']}%"
                        })
                    
                    preview_df = pd.DataFrame(preview_data)
                    st.dataframe(preview_df, use_container_width=True)
                    
                    if len(results) > 5:
                        st.info(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(results) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel)")
                    
                    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
                    st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ:")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        total_pages = len(results)
                        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤", total_pages)
                    
                    with col2:
                        valid_dates = len([r for r in results if r['date']])
                        st.metric("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", f"{valid_dates}/{total_pages}")
                    
                    with col3:
                        valid_invoices = len([r for r in results if r['invoice_number']])
                        st.metric("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", f"{valid_invoices}/{total_pages}")
                    
                    with col4:
                        valid_amounts = len([r for r in results if r['amount']])
                        st.metric("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", f"{valid_amounts}/{total_pages}")
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
                    try:
                        total_amount = sum([float(r['amount']) for r in results if r['amount']])
                        st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_amount:,.2f} ‡∏ö‡∏≤‡∏ó")
                    except:
                        st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
                    st.markdown("---")
                    st.subheader("üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel")
                    
                    excel_file = create_final_excel(results, uploaded_file.name)
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col2:
                        st.download_button(
                            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
                            data=excel_file,
                            file_name=f"Invoice_Data_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            type="primary",
                            use_container_width=True
                        )
                    
                    with col1:
                        st.info("üìã ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏°‡∏µ 2 Sheet: 'Invoice_Data' (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å) ‡πÅ‡∏•‡∏∞ 'Summary' (‡∏™‡∏£‡∏∏‡∏õ)")
                    
                    # Debug section (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ)
                    with st.expander("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)", expanded=False):
                        for result in results:
                            st.text(f"‡∏´‡∏ô‡πâ‡∏≤ {result['page_number']}: Confidence {result['confidence']}%")
                            st.text(f"Raw text (100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å): {result['raw_text'][:100]}...")
                            st.markdown("---")
                
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    else:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        with st.expander("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏î‡∏∂‡∏á", expanded=True):
            sample_data = {
                '‡∏•‡∏≥‡∏î‡∏±‡∏ö': [1, 2, 3, 4, 5],
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': ['01/08/68', '02/08/68', '03/08/68', '04/08/68', '05/08/68'],
                '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': ['HH6800470', 'HH6800474', 'HH6800475', 'HH6800476', 'HH6800478'],
                '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': ['4710.28', '16549.53', '17433.64', '12910.28', '21648.60']
            }
            
            sample_df = pd.DataFrame(sample_data)
            st.dataframe(sample_df, use_container_width=True)
            
            st.markdown("**‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡πà‡∏ô:**")
            st.markdown("""
            - ‚ö° **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á** - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 100%
            - üéØ **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á** - AI OCR ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏ó‡∏¢  
            - üí° **‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢** - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ Excel ‡πÄ‡∏•‡∏¢
            - üìä **‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô** - ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            """)

if __name__ == "__main__":
    main()
