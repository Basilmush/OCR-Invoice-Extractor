import streamlit as st
import pandas as pd
import numpy as np
import re
import pytesseract
import cv2
from pdf2image import convert_from_bytes
from openpyxl import Workbook
import io
from PIL import Image

# ================================
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract
# ================================
pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"

# ================================
# Helper Functions
# ================================
def preprocess_image_for_ocr(pil_img):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ OpenCV"""
    img = np.array(pil_img.convert("RGB"))
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)

    # Adaptive threshold ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏°
    thresh = cv2.adaptiveThreshold(
        gray, 255,
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv2.THRESH_BINARY, 35, 15
    )
    # ‡∏•‡∏î noise
    denoised = cv2.medianBlur(thresh, 3)
    return denoised

def clean_amount(val):
    """‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î OCR"""
    try:
        num = float(val.replace(",", ""))
        if num <= 0 or num > 100000:  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold
            return ""
        return f"{num:.2f}"
    except:
        return ""

def extract_fields(text):
    """‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•, ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT"""
    data = {"date": "", "invoice_number": "", "amount": ""}

    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    date_patterns = [
        r"(\d{1,2}/\d{1,2}/\d{2,4})",
        r"(\d{1,2}-\d{1,2}-\d{2,4})"
    ]
    for p in date_patterns:
        m = re.search(p, text)
        if m:
            data["date"] = m.group(1)
            break

    # ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•
    inv_patterns = [
        r"(HH\d{6,8})",
        r"(?:‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà|No\.?)\s*([A-Z0-9]{6,12})"
    ]
    for p in inv_patterns:
        m = re.search(p, text)
        if m:
            data["invoice_number"] = m.group(1)
            break

    # ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT
    amt_patterns = [
        r"([0-9,]+\.\d{2})\s*(?=‡∏ö‡∏≤‡∏ó|THB|‡∏Å‡πà‡∏≠‡∏ô VAT)",
        r"(?:‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤|Subtotal|‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ).*?([0-9,]+\.\d{2})"
    ]
    for p in amt_patterns:
        m = re.search(p, text, re.DOTALL | re.IGNORECASE)
        if m:
            data["amount"] = clean_amount(m.group(1))
            break

    return data

def fill_excel_with_data(data_list):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Excel ‡πÑ‡∏ü‡∏•‡πå"""
    df = pd.DataFrame(data_list)
    df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", df.index + 1)
    df.columns = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•", "‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT"]

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Invoice_Data")
    output.seek(0)
    return output

# ================================
# Streamlit App
# ================================
st.title("üìÑ OCR Extractor for Invoice PDF")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‚Üí OCR ‚Üí ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•, ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT ‚Üí ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel")

uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF", type="pdf")

if uploaded_file:
    pdf_bytes = uploaded_file.read()

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ OCR ..."):
        pages = convert_from_bytes(pdf_bytes, dpi=400)
        results = []

        for i, page in enumerate(pages):
            proc = preprocess_image_for_ocr(page)
            text = pytesseract.image_to_string(proc, lang="tha+eng", config="--psm 6 --oem 3")
            data = extract_fields(text)
            data["page_number"] = i + 1
            results.append(data)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• OCR ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
    st.subheader("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà OCR ‡πÄ‡∏à‡∏≠ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î)")
    df_results = pd.DataFrame(results)[["page_number", "date", "invoice_number", "amount"]]
    st.dataframe(df_results)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
    excel_file = fill_excel_with_data(df_results[["date","invoice_number","amount"]].to_dict(orient="records"))
    st.download_button(
        "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
        data=excel_file,
        file_name="Invoice_Data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
