import streamlit as st
import pandas as pd
import re
import pytesseract
from pdf2image import convert_from_path
from openpyxl import Workbook
from PIL import Image, ImageEnhance, ImageFilter
import os
import io
import traceback
from datetime import datetime, timedelta
from streamlit.logger import get_logger

logger = get_logger(__name__)

# =========================================================
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud Server
# =========================================================
try:
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
except Exception as e:
    st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tesseract.")
    logger.warning(f"Tesseract setup failed: {e}")

def custom_exception_handler(exc_type, exc_value, exc_traceback):
    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {exc_value}")
    logger.error("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))
    st.session_state.error_log = traceback.format_exc()
    if st.button("üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"):
        st.text(st.session_state.error_log)

# Override global exception handler
import sys
sys.excepthook = custom_exception_handler

def enhance_image_for_ocr(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR"""
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
        image = image.convert('L')
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.5)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° sharpness
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(2.0)
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
        image = image.filter(ImageFilter.UnsharpMask(radius=2, percent=200, threshold=3))
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô binary (‡∏Ç‡∏≤‡∏ß-‡∏î‡∏≥)
        image = image.point(lambda x: 0 if x < 140 else 255, '1')
        return image
    except Exception as e:
        st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}. ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ó‡∏ô.")
        logger.warning(f"Image enhancement failed: {e}")
        return image

def extract_ocr_from_pdf(pdf_bytes):
    """‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô OCR Text ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á text ‡πÅ‡∏•‡∏∞ images"""
    temp_file = "temp_upload.pdf"
    try:
        if not pdf_bytes or len(pdf_bytes) == 0:
            raise ValueError("‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open(temp_file, "wb") as f:
            f.write(pdf_bytes)
        
        st.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        pages = convert_from_path(temp_file, dpi=600, fmt='PNG')  # ‡πÄ‡∏û‡∏¥‡πà‡∏° DPI ‡πÄ‡∏õ‡πá‡∏ô 600
        
        ocr_results = []
        for i, page in enumerate(pages):
            st.info(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{len(pages)}...")
            enhanced_page = enhance_image_for_ocr(page)
            ocr_text = pytesseract.image_to_string(
                enhanced_page,
                lang="tha+eng",
                config='--psm 6 --oem 3'
            )
            ocr_results.append({
                'page_number': i + 1,
                'ocr_text': ocr_text,
                'image': enhanced_page
            })
        
        os.remove(temp_file)
        return ocr_results
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á PDF: {str(e)}")
        logger.error(f"PDF conversion failed: {e}")
        return []

def clean_amount(raw_amount):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤ (‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏™‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å)"""
    if not raw_amount:
        return ""
    cleaned = re.sub(r'[^\d\.]', '', raw_amount.replace(',', ''))
    try:
        return f"{float(cleaned):.2f}"
    except ValueError:
        return ""

def extract_data_from_ocr_text(text):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô"""
    data = {'date': '', 'invoice_number': '', 'amount': '', 'raw_matches': {}, 'confidence': 0}
    
    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    date_pattern = r'(?:‡∏ß‡∏±‡∏ô‡∏ó‡∏µ|Date|‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)\s*[.,:\s\n\r]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})'
    date_matches = re.search(date_pattern, text, re.IGNORECASE)
    if date_matches:
        data['date'] = date_matches.group(1)
        data['confidence'] += 30
        data['raw_matches']['dates_found'] = [data['date']]
    
    # ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà
    invoice_pattern = r'(?:‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ|No|‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà)\s*[.,:\s\n\r]*\s*([H][H]\d{6,8}|\w{2}\d{6,8})'
    invoice_matches = re.search(invoice_pattern, text, re.IGNORECASE)
    if invoice_matches:
        data['invoice_number'] = invoice_matches.group(1)
        data['confidence'] += 30
        data['raw_matches']['invoices_found'] = [data['invoice_number']]
    
    # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
    fuzzy_pattern = r"(?:[‡∏°‡∏°]*‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤|Product\s*Value|Net\s*Amount)\s*[.,:\s\n\r]*\s*([,\d]+\.\d{2})\s*(?:‡∏ö‡∏≤‡∏ó)?"
    deep_fallback_pattern = r"(?:‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î|Less\s*Discount)(?:.|\n)*?([,\d]+\.\d{2})\s*(?:‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°|7\.00\s*%)"
    amount_match = re.search(fuzzy_pattern, text, re.IGNORECASE | re.DOTALL)
    if not amount_match:
        amount_match = re.search(deep_fallback_pattern, text, re.IGNORECASE | re.DOTALL)
    if amount_match:
        raw_amount = amount_match.group(1)
        data['amount'] = clean_amount(raw_amount)
        data['confidence'] += 40
        data['raw_matches']['amounts_found'] = [data['amount']]
    
    return data

def validate_data(data):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        if data['date']:
            date_obj = datetime.strptime(data['date'], '%d/%m/%Y')
            if date_obj > datetime.now() or date_obj < datetime.now() - timedelta(days=365*2):
                data['date'] = ''
                st.warning(f"‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {data['date']} ‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        if data['amount']:
            amount = float(data['amount'].replace(',', '')) if data['amount'].replace('.', '').isdigit() else 0
            if amount > 500000 or amount < 0:
                data['amount'] = ''
                st.warning(f"‚ö†Ô∏è ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô {data['amount']} ‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        return data
    except ValueError:
        return data

def create_excel_template():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel Template"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Invoice_Data"
    headers = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
    for col, header in enumerate(headers, 1):
        ws.cell(row=1, column=col, value=header)
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def fill_excel_with_data(data_list):
    """‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel"""
    df_data = pd.DataFrame(data_list)
    df_data = df_data.sort_values(by='page_number').reset_index(drop=True)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_to_excel = df_data[['date', 'invoice_number', 'amount']].copy()
        df_to_excel.insert(0, '‡∏•‡∏≥‡∏î‡∏±‡∏ö', df_to_excel.index + 1)
        df_to_excel.columns = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
        df_to_excel.to_excel(writer, index=False, sheet_name='Invoice_Data')
    output.seek(0)
    return output

def main():
    st.set_page_config(page_title="PDF OCR Extractor", layout="wide", initial_sidebar_state="expanded")
    st.title("üîç PDF OCR Checker & Excel Data Filler")
    st.markdown("**(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ò‡∏ô‡∏≤‡∏£‡∏±‡∏ï‡∏ô‡πå‡∏õ‡∏¥‡∏¢‡∏∞‡∏õ‡∏¥‡πÇ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏° ‡∏à‡∏≥‡∏Å‡∏±‡∏î)**")
    st.markdown("---")
    
    if 'ocr_results' not in st.session_state:
        st.session_state.ocr_results = []
    if 'extracted_data' not in st.session_state:
        st.session_state.extracted_data = []
    
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")
        st.markdown("""
        1. üìÅ **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF**
        2. üöÄ **‡∏Å‡∏î '‡πÄ‡∏£‡∏¥‡πà‡∏° OCR'**
        3. ‚úèÔ∏è **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)**
        4. üíæ **‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel**
        """)
        st.markdown("---")
        st.markdown("### üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
        st.markdown("""
        - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà** (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: DD/MM/YYYY)
        - **‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•** (‡πÄ‡∏ä‡πà‡∏ô HH6800470)
        - **‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤** (‡πÄ‡∏ä‡πà‡∏ô 4710.28)
        """)
    
    st.header("1. üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ")
    
    if uploaded_file is not None:
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}")
        col1, col2 = st.columns([1, 4])
        with col1:
            if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á OCR", type="primary"):
                with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ OCR..."):
                    pdf_bytes = uploaded_file.getvalue()
                    st.session_state.ocr_results = extract_ocr_from_pdf(pdf_bytes)
        
        if st.session_state.ocr_results:
            st.success(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏û‡∏ö {len(st.session_state.ocr_results)} ‡∏´‡∏ô‡πâ‡∏≤")
            st.header("2. üëÅÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)")
            st.warning("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÇ‡∏î‡∏¢ OCR ‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤")
            
            for result in st.session_state.ocr_results:
                page_key = result['page_number']
                extracted = extract_data_from_ocr_text(result['ocr_text'])
                extracted = validate_data(extracted)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                saved_data = next((d for d in st.session_state.extracted_data if d['page_number'] == page_key), None)
                
                with st.expander(f"üìÑ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {page_key} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {extracted['confidence']}%)", expanded=False):
                    st.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß' if saved_data else '‚úèÔ∏è ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}")
                    if extracted['confidence'] < 80:
                        st.warning("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡πà‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
                    
                    col1, col2 = st.columns([1, 1])
                    with col1:
                        st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
                        initial_date = saved_data['date'] if saved_data else extracted['date']
                        initial_invoice = saved_data['invoice_number'] if saved_data else extracted['invoice_number']
                        initial_amount = saved_data['amount'] if saved_data else extracted['amount']
                        
                        date_value = st.text_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:", value=initial_date, key=f"date_{page_key}")
                        invoice_value = st.text_input("üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•:", value=initial_invoice, key=f"invoice_{page_key}")
                        amount_value = st.text_input("üí∞ ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT:", value=initial_amount, key=f"amount_{page_key}")
                        
                        if st.button(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ {page_key}", key=f"save_{page_key}", type="primary", use_container_width=True):
                            existing_index = next((i for i, data in enumerate(st.session_state.extracted_data) if data['page_number'] == page_key), None)
                            page_data = {'page_number': page_key, 'date': date_value, 'invoice_number': invoice_value, 'amount': amount_value}
                            if existing_index is not None:
                                st.session_state.extracted_data[existing_index] = page_data
                            else:
                                st.session_state.extracted_data.append(page_data)
                            st.rerun()
                    
                    with col2:
                        st.subheader("üñº‡πå ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û OCR & Text (‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö):")
                        st.image(result['image'], use_container_width=True)
                        with st.expander("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏î‡∏¥‡∏ö (Raw Text)"):
                            st.text_area("OCR Text:", result['ocr_text'], height=250, key=f"ocr_text_{page_key}")
            
            if st.session_state.extracted_data:
                st.header("3. üìä ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏° (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)")
                st.info("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
                global_data = [{'‡∏•‡∏≥‡∏î‡∏±‡∏ö': i+1, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': d['date'], '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': d['invoice_number'], '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': d['amount']} 
                              for i, d in enumerate(sorted(st.session_state.extracted_data, key=lambda x: x['page_number']))]
                global_df = pd.DataFrame(global_data)
                search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ß‡∏°", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
                if search_term:
                    global_df = global_df[global_df.apply(lambda row: search_term.lower() in str(row).lower(), axis=1)]
                edited_global_df = st.data_editor(
                    global_df,
                    column_config={
                        "‡∏•‡∏≥‡∏î‡∏±‡∏ö": st.column_config.NumberColumn("‡∏•‡∏≥‡∏î‡∏±‡∏ö", disabled=True),
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": st.column_config.TextColumn("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", help="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: DD/MM/YYYY"),
                        "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•": st.column_config.TextColumn("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•", help="‡πÄ‡∏ä‡πà‡∏ô HH6800470"),
                        "‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT": st.column_config.TextColumn("‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT", help="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 4710.28")
                    },
                    use_container_width=True,
                    num_rows="dynamic"
                )
                if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°", type="primary"):
                    for i, row in edited_global_df.iterrows():
                        page_key = i + 1
                        existing = next((d for d in st.session_state.extracted_data if d['page_number'] == page_key), None)
                        if existing:
                            existing['date'] = row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']
                            existing['invoice_number'] = row['‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•']
                            existing['amount'] = row['‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
                    st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.rerun()
            
            if st.session_state.extracted_data:
                st.header("4. üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel")
                df_summary = pd.DataFrame(sorted(st.session_state.extracted_data, key=lambda x: x['page_number']))
                df_summary = df_summary.reset_index(drop=True)
                st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß:")
                st.dataframe(df_summary, use_container_width=True, height=300)
                st.info(f"üìä ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(st.session_state.extracted_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                excel_file = fill_excel_with_data(st.session_state.extracted_data)
                st.download_button(
                    label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (Final File)",
                    data=excel_file,
                    file_name=f"Invoice_Data_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary",
                    use_container_width=True
                )
        
    else:
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        st.header("üìã ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template")
        template_file = create_excel_template()
        st.download_button(
            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template",
            data=template_file,
            file_name="Invoice_Template.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == "__main__":
    main()
