import streamlit as st
import pandas as pd
import re
import pytesseract
from pdf2image import convert_from_path
from openpyxl import Workbook, load_workbook
from PIL import Image, ImageEnhance
import os
import io

# =========================================================
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud Server
# =========================================================
try:
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Tesseract Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux/Cloud Server
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
except Exception:
    pass


def enhance_image_for_ocr(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR"""
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° sharpness
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(1.5)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° brightness ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    enhancer = ImageEnhance.Brightness(image)
    image = enhancer.enhance(1.1)
    
    return image

def extract_ocr_from_pdf(pdf_bytes):
    """‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô OCR Text ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á text ‡πÅ‡∏•‡∏∞ images"""
    
    temp_file = "temp_upload.pdf"
    try:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open(temp_file, "wb") as f:
            f.write(pdf_bytes)
        
        st.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        
        # ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Poppler ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏´‡∏≤ Path ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å packages.txt)
        pages = convert_from_path(temp_file, dpi=400)
        
        ocr_results = []
        
        for i, page in enumerate(pages):
            st.info(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{len(pages)}...")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            enhanced_page = enhance_image_for_ocr(page)
            
            # ‡∏ó‡∏≥ OCR
            ocr_text = pytesseract.image_to_string(
                enhanced_page,
                lang="tha+eng",
                config='--psm 6 --oem 3'
            )
            
            ocr_results.append({
                'page_number': i + 1,
                'ocr_text': ocr_text,
                'image': enhanced_page
            })
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(temp_file)
        
        return ocr_results
        
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á PDF: {str(e)}")
        return []

def extract_data_from_ocr_text(text):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR"""
    data = {
        'date': '',
        'invoice_number': '',
        'amount': '',
        'raw_matches': {}
    }
    
    # --- 1. ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà HH (‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°) ---
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ HHxxxxxx ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡πÜ ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    invoice_pattern = r'‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ\s*(?:No\.)?\s*([H]\w{6,8})'
    invoice_matches = re.search(invoice_pattern, text, re.IGNORECASE)
    if not invoice_matches:
        # Fallback 1: ‡∏´‡∏≤ HHxxxxxx ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ
        invoice_pattern = r'(HH\d{6,8})'
        invoice_matches = re.search(invoice_pattern, text)

    if invoice_matches:
        data['invoice_number'] = invoice_matches.group(1)
        data['raw_matches']['invoices_found'] = [data['invoice_number']]
    
    # --- 2. ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°) ---
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠ Date ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ DD/MM/YY
    date_pattern = r'(?:‡∏ß‡∏±‡∏ô‡∏ó‡∏µ|Date)\s*(\d{1,2}/\d{1,2}/\d{2,4})'
    date_matches = re.search(date_pattern, text, re.IGNORECASE)
    if date_matches:
        data['date'] = date_matches.group(1)
        data['raw_matches']['dates_found'] = [data['date']]
    
    # --- 3. ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤) - ‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ---
    
    # Regex ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ Product Value ‡πÇ‡∏î‡∏¢‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ú‡∏¥‡∏î‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô [‡∏°‡∏°]*
    amount_pattern_fuzzy = r"(?:[‡∏°‡∏°]*‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤|Product\s*Value)\s*[.,:\s\n\r]*\s*([,\d]+\.\d{2})"
    
    # Regex ‡∏™‡∏≥‡∏£‡∏≠‡∏á (Fallback): ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á '‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î' ‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°'
    # ‡πÉ‡∏ä‡πâ re.DOTALL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ '.' ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢
    amount_pattern_deep_fallback = r"(?:‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î|Less Discount)(?:.|\n)*?([,\d]+\.\d{2})\s*(?:‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°|7.00 %)"

    
    amount_match = re.search(amount_pattern_fuzzy, text, re.IGNORECASE)
    
    # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÅ‡∏ö‡∏ö Fuzzy ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö Deep Fallback
    if not amount_match:
        amount_match = re.search(amount_pattern_deep_fallback, text, re.IGNORECASE | re.DOTALL)

    if amount_match:
        # group(1) ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
        raw_amount = amount_match.group(1).replace(',', '')
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            data['amount'] = f"{float(raw_amount):.2f}"
        except ValueError:
            data['amount'] = raw_amount
            
    data['raw_matches']['amounts_found'] = [data['amount']]
    
    return data

def create_excel_template():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel Template"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Invoice_Data"
    
    # Header
    headers = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
    for col, header in enumerate(headers, 1):
        ws.cell(row=1, column=col, value=header)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def fill_excel_with_data(data_list):
    """‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å List of Dictionaries
    df_data = pd.DataFrame(data_list)
    
    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
    df_data = df_data.sort_values(by='page_number').reset_index(drop=True)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•, ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT)
        df_to_excel = df_data[['date', 'invoice_number', 'amount']].copy()
        df_to_excel.insert(0, '‡∏•‡∏≥‡∏î‡∏±‡∏ö', df_to_excel.index + 1)
        
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        df_to_excel.columns = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
        
        df_to_excel.to_excel(writer, index=False, sheet_name='Invoice_Data')
    
    output.seek(0)
    return output

def main():
    st.set_page_config(
        page_title="PDF OCR Extractor",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üîç PDF OCR Checker & Excel Data Filler")
    st.markdown("**(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ò‡∏ô‡∏≤‡∏£‡∏±‡∏ï‡∏ô‡πå‡∏õ‡∏¥‡∏¢‡∏∞‡∏õ‡∏¥‡πÇ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏° ‡∏à‡∏≥‡∏Å‡∏±‡∏î)**")
    st.markdown("---")
    
    # Initialize session state
    if 'ocr_results' not in st.session_state:
        st.session_state.ocr_results = []
    if 'extracted_data' not in st.session_state:
        st.session_state.extracted_data = []
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")
        st.markdown("""
        1. üìÅ **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF**
        2. üöÄ **‡∏Å‡∏î '‡πÄ‡∏£‡∏¥‡πà‡∏° OCR'**
        3. ‚úèÔ∏è **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)**
        4. üíæ **‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel**
        """)
        
        st.markdown("---")
        st.markdown("### üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
        st.markdown("""
        - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà** (‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
        - **‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•** (‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•')
        - **‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤** (‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT')
        """)
    
    # --- Step 1 & 2: Upload and Convert ---
    st.header("1. üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF")
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF",
        type="pdf",
        help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ"
    )
    
    if uploaded_file is not None:
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}")
        
        col1, col2 = st.columns([1, 4])
        with col1:
            if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á OCR", type="primary"):
                with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ OCR..."):
                    pdf_bytes = uploaded_file.getvalue()
                    st.session_state.ocr_results = extract_ocr_from_pdf(pdf_bytes)
        
        if st.session_state.ocr_results:
            st.success(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏û‡∏ö {len(st.session_state.ocr_results)} ‡∏´‡∏ô‡πâ‡∏≤")
            
            # --- Step 3: Display and Edit Results ---
            st.header("2. üëÅÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)")
            st.warning("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÇ‡∏î‡∏¢ OCR ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤")
            
            # Loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
            for result in st.session_state.ocr_results:
                page_key = result['page_number']
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OCR (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á)
                extracted = extract_data_from_ocr_text(result['ocr_text'])
                
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                saved_data = next((d for d in st.session_state.extracted_data if d['page_number'] == page_key), None)
                
                with st.expander(f"üìÑ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {page_key}", expanded=False):
                    
                    st.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß' if saved_data else '‚úèÔ∏è ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}")
                    
                    col1, col2 = st.columns([1, 1])
                    
                    with col1:
                        st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
                        
                        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å OCR ‡πÉ‡∏´‡∏°‡πà
                        initial_date = saved_data['date'] if saved_data else extracted['date']
                        initial_invoice = saved_data['invoice_number'] if saved_data else extracted['invoice_number']
                        initial_amount = saved_data['amount'] if saved_data else extracted['amount']
                        
                        # --- Input Fields for User Correction ---
                        date_value = st.text_input(
                            "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:",
                            value=initial_date,
                            key=f"date_{page_key}"
                        )
                        
                        invoice_value = st.text_input(
                            "üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•:",
                            value=initial_invoice,
                            key=f"invoice_{page_key}"
                        )
                        
                        amount_value = st.text_input(
                            "üí∞ ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT:",
                            value=initial_amount,
                            key=f"amount_{page_key}"
                        )
                        
                        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        if st.button(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ {page_key}", key=f"save_{page_key}", type="primary", use_container_width=True):
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            existing_index = next((i for i, data in enumerate(st.session_state.extracted_data) if data['page_number'] == page_key), None)
                            
                            page_data = {
                                'page_number': page_key,
                                'date': date_value,
                                'invoice_number': invoice_value,
                                'amount': amount_value
                            }
                            
                            if existing_index is not None:
                                st.session_state.extracted_data[existing_index] = page_data
                            else:
                                st.session_state.extracted_data.append(page_data)
                            
                            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Streamlit ‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                            st.rerun() 
                    
                    with col2:
                        st.subheader("üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û OCR & Text (‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö):")
                        st.image(result['image'], use_container_width=True)
                        
                        with st.expander("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏î‡∏¥‡∏ö (Raw Text)"):
                             st.text_area(
                                "OCR Text:",
                                result['ocr_text'],
                                height=250,
                                key=f"ocr_text_{page_key}"
                            )
            
            # --- Step 4: Create Excel ---
            if st.session_state.extracted_data:
                st.header("3. üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á Excel
                df_summary = pd.DataFrame(st.session_state.extracted_data)
                df_summary = df_summary.sort_values(by='page_number').reset_index(drop=True)
                
                st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß:")
                st.dataframe(df_summary, use_container_width=True, height=300)
                
                st.info(f"üìä ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(st.session_state.extracted_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                
                # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
                excel_file = fill_excel_with_data(st.session_state.extracted_data)
                
                st.download_button(
                    label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (Final File)",
                    data=excel_file,
                    file_name=f"Invoice_Data_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary",
                    use_container_width=True
                )
        
    else:
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        # ‡πÅ‡∏™‡∏î‡∏á Template Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        st.header("üìã ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template")
        template_file = create_excel_template()
        
        st.download_button(
            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template",
            data=template_file,
            file_name="Invoice_Template.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == "__main__":
    main()
