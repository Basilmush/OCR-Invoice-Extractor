import streamlit as st
import pandas as pd
import re
import pytesseract
from pdf2image import convert_from_path
from openpyxl import Workbook
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import os
import io

# =========================================================
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud
# =========================================================
try:
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
except Exception:
    pass

def optimize_image_for_ocr(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR"""
    try:
        # 1. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
        if image.mode != 'L':
            image = image.convert('L')
        
        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û 2 ‡πÄ‡∏ó‡πà‡∏≤
        width, height = image.size
        image = image.resize((width * 2, height * 2), Image.LANCZOS)
        
        # 3. Auto contrast
        image = ImageOps.autocontrast(image, cutoff=3)
        
        # 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(4.0)
        
        # 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(3.5)
        
        # 6. Apply UnsharpMask filter
        image = image.filter(ImageFilter.UnsharpMask(radius=2, percent=150, threshold=3))
        
        # 7. ‡∏õ‡∏£‡∏±‡∏ö brightness
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(1.3)
        
        # 8. Add binary threshold
        image = image.point(lambda x: 0 if x < 130 else 255)
        
        return image
    except Exception as e:
        st.warning(f"Image optimization warning: {e}")
        return image

def optimize_image_for_display(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    try:
        max_width = 800
        ratio = max_width / image.width
        new_height = int(image.height * ratio)
        image = image.resize((max_width, new_height), Image.LANCZOS)
        
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(2.0)
        
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.5)
        
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(1.2)
        
        return image
    except Exception as e:
        st.warning(f"Image display optimization warning: {e}")
        return image

def extract_invoice_data_precise(ocr_text):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"""
    lines = [line.strip() for line in ocr_text.split('\n') if line.strip()]
    clean_text = ' '.join(lines)
    
    result = {
        'date': '',
        'invoice_number': '',
        'amount': '',
        'confidence': 0,
        'debug_matches': {}
    }
    
    date_patterns = [r'(\d{2}/\d{2}/\d{2})', r'(\d{1,2}/\d{1,2}/\d{4})']  # Generalized date patterns
    for line in lines:
        if 'Date' in line or '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in line or 'Date' in line.upper():
            for pattern in date_patterns:
                match = re.search(pattern, line)
                if match:
                    result['date'] = match.group(1)
                    result['confidence'] += 30
                    result['debug_matches']['date_line'] = line
                    break
            if result['date']:
                break
    if not result['date']:
        for pattern in date_patterns:
            matches = re.findall(pattern, clean_text)
            if matches:
                result['date'] = matches[0]
                result['confidence'] += 20
                break
    
    invoice_patterns = [r'(INV-\d{6})', r'(HH\d{7})', r'(\w{2}\d{6})']  # Generalized invoice patterns
    for line in lines:
        if 'No.' in line or '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà' in line or 'No.' in line.upper():
            for pattern in invoice_patterns:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    result['invoice_number'] = match.group(1)
                    result['confidence'] += 30
                    result['debug_matches']['invoice_line'] = line
                    break
            if result['invoice_number']:
                break
    if not result['invoice_number']:
        for pattern in invoice_patterns:
            matches = re.findall(pattern, clean_text, re.IGNORECASE)
            if matches:
                result['invoice_number'] = matches[0]
                result['confidence'] += 20
                break
    
    amount_patterns = [
        r'Amount\s*([,\d]+\.\d{2})',
        r'‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤\s*([,\d]+\.\d{2})',
        r'([,\d]+\.\d{2})\s*(?:USD|THB|JPY|CNY)?',
    ]
    found_amount = False
    for line in lines:
        for pattern in amount_patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                raw_amount = match.group(1)
                clean_amount = raw_amount.replace(',', '')
                try:
                    amount_value = float(clean_amount)
                    if 100 <= amount_value <= 100000:  # Adjusted range
                        result['amount'] = clean_amount
                        result['confidence'] += 40
                        result['debug_matches']['amount_line'] = line
                        found_amount = True
                        break
                except ValueError:
                    continue
        if found_amount:
            break
    if not found_amount:
        fallback_patterns = [r'\b(\d{3,6}\.\d{2})\b']
        matches = re.findall(fallback_patterns[0], clean_text)
        if matches:
            clean_amount = matches[0].replace(',', '')
            try:
                amount_value = float(clean_amount)
                if 100 <= amount_value <= 100000:
                    result['amount'] = clean_amount
                    result['confidence'] += 20
            except ValueError:
                pass
    
    result['debug_matches']['lines_sample'] = lines[:10]
    return result

def process_pdf_ultra_fast(pdf_bytes, selected_langs):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    temp_file = "temp_pdf.pdf"
    
    try:
        with open(temp_file, "wb") as f:
            f.write(pdf_bytes)
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        status_text.text("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        
        pages = convert_from_path(temp_file, dpi=400, fmt='PNG')
        
        results = []
        total_pages = len(pages)
        
        for i, page in enumerate(pages):
            progress = (i + 1) / total_pages
            progress_bar.progress(progress)
            status_text.text(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{total_pages}")
            
            optimized_image = optimize_image_for_ocr(page)
            ocr_texts = []
            
            # Config 1: ‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            try:
                text1 = pytesseract.image_to_string(
                    optimized_image,
                    lang="+".join(selected_langs),
                    config="--psm 6 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz/.-:‡∏Å-‡πô "
                )
                ocr_texts.append(text1)
            except:
                pass
            
            # Config 2: ‡πÄ‡∏ô‡πâ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            try:
                text2 = pytesseract.image_to_string(
                    optimized_image,
                    lang="+".join(selected_langs),
                    config="--psm 4 --oem 3"
                )
                ocr_texts.append(text2)
            except:
                pass
            
            combined_text = "\n".join(ocr_texts)
            extracted_data = extract_invoice_data_precise(combined_text)
            extracted_data['page_number'] = i + 1
            extracted_data['raw_text'] = combined_text
            
            results.append(extracted_data)
        
        os.remove(temp_file)
        progress_bar.empty()
        status_text.empty()
        
        return results, pages
        
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return [], []

def create_final_excel(data_list, filename):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel"""
    df_data = []
    for i, data in enumerate(data_list, 1):
        df_data.append({
            '‡∏•‡∏≥‡∏î‡∏±‡∏ö': i,
            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': data['date'],
            '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': data['invoice_number'], 
            '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': data['amount']
        })
    
    df = pd.DataFrame(df_data)
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='Invoice_Data', index=False)
        summary_data = {
            '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà', '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô', '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'],
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏Ñ‡πà‡∏≤': [
                len(df_data),
                len([d for d in data_list if d['date']]),
                len([d for d in data_list if d['invoice_number']]),
                len([d for d in data_list if d['amount']]),
                sum([float(d['amount']) if d['amount'] else 0 for d in data_list])
            ]
        }
        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name='Summary', index=False)
    
    output.seek(0)
    return output

def main():
    st.set_page_config(page_title="Ultra-Fast Invoice Extractor", page_icon="‚ö°", layout="wide")
    st.title("‚ö° Ultra-Fast PDF Invoice Extractor")
    st.markdown("**‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° - ‡πÑ‡∏î‡πâ Excel ‡πÄ‡∏•‡∏¢ | ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤**")
    st.markdown("---")
    
    with st.container():
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.info("üìã **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:** ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ ‚Üí ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‚Üí ‡∏Å‡∏î '‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û ‚Üí ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel ‚úÖ")
    
    st.header("üåê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    language_options = {
        "Thai": "tha",
        "English": "eng",
        "Chinese (Simplified)": "chi_sim",
        "Japanese": "jpn",
        "French": "fra",
        "Spanish": "spa"
    }
    selected_langs = st.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤)", 
        options=list(language_options.keys()), 
        default=["Thai", "English"],
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
    )
    selected_lang_codes = [language_options[lang] for lang in selected_langs]
    
    st.header("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", type="pdf")
    
    if uploaded_file is not None:
        col1, col2, col3 = st.columns([1, 1, 2])
        with col1:
            file_size = len(uploaded_file.getvalue()) / (1024 * 1024)
            st.metric("‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå", f"{file_size:.1f} MB")
        with col2:
            st.metric("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‚úÖ")
        with col3:
            if st.button("üöÄ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Excel", type="primary", use_container_width=True):
                with st.spinner("‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI OCR..."):
                    pdf_bytes = uploaded_file.getvalue()
                    results, page_images = process_pdf_ultra_fast(pdf_bytes, selected_lang_codes)
                
                if results:
                    st.success(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(results)} ‡∏´‡∏ô‡πâ‡∏≤")
                    st.subheader("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
                    preview_data = []
                    for i, result in enumerate(results[:5], 1):
                        preview_data.append({
                            '‡∏´‡∏ô‡πâ‡∏≤': i,
                            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': result['date'] or '‚ùå',
                            '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': result['invoice_number'] or '‚ùå',
                            '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': result['amount'] or '‚ùå',
                            '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥': f"{result['confidence']}%"
                        })
                    preview_df = pd.DataFrame(preview_data)
                    st.dataframe(preview_df, use_container_width=True)
                    if len(results) > 5:
                        st.info(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(results) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel)")
                    
                    st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ:")
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        total_pages = len(results)
                        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤", total_pages)
                    with col2:
                        valid_dates = len([r for r in results if r['date']])
                        st.metric("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", f"{valid_dates}/{total_pages}")
                    with col3:
                        valid_invoices = len([r for r in results if r['invoice_number']])
                        st.metric("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", f"{valid_invoices}/{total_pages}")
                    with col4:
                        valid_amounts = len([r for r in results if r['amount']])
                        st.metric("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", f"{valid_amounts}/{total_pages}")
                    
                    total_amount = sum([float(r['amount']) if r['amount'] else 0 for r in results])
                    st.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_amount:,.2f} ‡∏ö‡∏≤‡∏ó")
                    
                    st.markdown("---")
                    st.subheader("üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel")
                    excel_file = create_final_excel(results, uploaded_file.name)
                    col1, col2 = st.columns([3, 1])
                    with col2:
                        st.download_button(
                            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
                            data=excel_file,
                            file_name=f"Invoice_Data_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            type="primary",
                            use_container_width=True
                        )
                    with col1:
                        st.info("üìã ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏°‡∏µ 2 Sheet: 'Invoice_Data' (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å) ‡πÅ‡∏•‡∏∞ 'Summary' (‡∏™‡∏£‡∏∏‡∏õ)")
                    
                    st.subheader("üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏û‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
                    for idx, result in enumerate(results):
                        with st.expander(f"‡∏´‡∏ô‡πâ‡∏≤ {idx+1} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result['date']} | {result['invoice_number']} | {result['amount']} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ {result['confidence']}%"):
                            optimized_display_image = optimize_image_for_display(page_images[idx])
                            st.image(optimized_display_image, caption=f"‡∏†‡∏≤‡∏û‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤ {idx+1} (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î)", use_column_width=True)
                            st.text_area(f"Raw OCR Text ‡∏´‡∏ô‡πâ‡∏≤ {idx+1}:", result.get('raw_text', ''), height=300)
                            if 'debug_matches' in result:
                                st.write("Debug Matches:")
                                st.json(result['debug_matches'])
                    
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á pattern")
                
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    else:
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        with st.expander("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏î‡∏∂‡∏á", expanded=True):
            sample_data = {
                '‡∏•‡∏≥‡∏î‡∏±‡∏ö': [1, 2, 3],
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': ['01/09/25', '02/09/25', '03/09/25'],
                '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•': ['INV-123456', 'INV-123457', 'INV-123458'],
                '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT': ['1500.50', '2500.75', '3000.00']
            }
            sample_df = pd.DataFrame(sample_data)
            st.dataframe(sample_df, use_container_width=True)
            st.markdown("**‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡πà‡∏ô:**")
            st.markdown("""
            - ‚ö° **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á** - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 100%
            - üéØ **‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤** - OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            - üí° **‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢** - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ Excel ‡πÄ‡∏•‡∏¢
            - üìä **‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô** - ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏û‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            """)

if __name__ == "__main__":
    main()
