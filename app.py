import streamlit as st
import pandas as pd
import re
import pytesseract
from pdf2image import convert_from_path
from openpyxl import Workbook, load_workbook
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import os
import io

# =========================================================
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud Server
# =========================================================
try:
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Tesseract Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux/Cloud Server
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
except Exception:
    pass

def advanced_image_preprocessing(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR ‡∏î‡πâ‡∏ß‡∏¢ PIL ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ OpenCV)"""
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
        if image.mode != 'L':
            gray_image = image.convert('L')
        else:
            gray_image = image
        
        # 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
        enhancer = ImageEnhance.Contrast(gray_image)
        contrast_image = enhancer.enhance(2.5)
        
        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° sharpness
        enhancer = ImageEnhance.Sharpness(contrast_image)
        sharp_image = enhancer.enhance(2.0)
        
        # 3. ‡∏õ‡∏£‡∏±‡∏ö brightness
        enhancer = ImageEnhance.Brightness(sharp_image)
        bright_image = enhancer.enhance(1.2)
        
        # 4. Apply filters
        # Sharpen filter
        sharpened = bright_image.filter(ImageFilter.SHARPEN)
        
        # Edge enhance
        edge_enhanced = sharpened.filter(ImageFilter.EDGE_ENHANCE_MORE)
        
        # 5. Auto contrast
        final_image = ImageOps.autocontrast(edge_enhanced, cutoff=2)
        
        # 6. ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        enhancer = ImageEnhance.Contrast(final_image)
        final_processed = enhancer.enhance(1.3)
        
        return final_processed
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÑ‡∏î‡πâ: {e}")
        # Fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        return enhance_image_basic(image)

def enhance_image_basic(image):
    """‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Fallback)"""
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)
    
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(1.5)
    
    enhancer = ImageEnhance.Brightness(image)
    image = enhancer.enhance(1.1)
    
    return image

def extract_ocr_from_pdf(pdf_bytes):
    """‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô OCR Text ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á text ‡πÅ‡∏•‡∏∞ images"""
    temp_file = "temp_upload.pdf"
    try:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open(temp_file, "wb") as f:
            f.write(pdf_bytes)
        
        st.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        
        # ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á
        pages = convert_from_path(temp_file, dpi=450, fmt='PNG')
        
        ocr_results = []
        
        for i, page in enumerate(pages):
            st.info(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{len(pages)}...")
            
            # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
            enhanced_page = advanced_image_preprocessing(page)
            
            # ‡∏•‡∏≠‡∏á OCR ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            ocr_configs = [
                '--psm 6 --oem 3',  # Uniform text block
                '--psm 4 --oem 3',  # Single column text
                '--psm 8 --oem 3',  # Single word
                '--psm 13 --oem 3'  # Raw line. Treat the image as a single text line
            ]
            
            best_text = ""
            best_confidence = 0
            
            for config in ocr_configs:
                try:
                    # ‡∏ó‡∏≥ OCR ‡∏î‡πâ‡∏ß‡∏¢ config ‡∏ô‡∏µ‡πâ
                    ocr_data = pytesseract.image_to_data(
                        enhanced_page,
                        lang="tha+eng",
                        config=config,
                        output_type=pytesseract.Output.DICT
                    )
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì confidence ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                    confidences = [int(conf) for conf in ocr_data['conf'] if int(conf) > 0]
                    avg_confidence = sum(confidences) / len(confidences) if confidences else 0
                    
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å result ‡∏ó‡∏µ‡πà‡∏°‡∏µ confidence ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                    if avg_confidence > best_confidence:
                        best_confidence = avg_confidence
                        best_text = pytesseract.image_to_string(
                            enhanced_page,
                            lang="tha+eng",
                            config=config
                        )
                        
                except Exception as e:
                    continue
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ result ‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£ OCR ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            if not best_text.strip():
                best_text = pytesseract.image_to_string(
                    enhanced_page,
                    lang="tha+eng",
                    config='--psm 6 --oem 3'
                )
            
            ocr_results.append({
                'page_number': i + 1,
                'ocr_text': best_text,
                'image': enhanced_page,
                'confidence': best_confidence
            })
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(temp_file)
        
        return ocr_results
        
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á PDF: {str(e)}")
        return []

def clean_amount(raw_amount):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤"""
    if not raw_amount:
        return ""
    
    # ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    cleaned = re.sub(r'[^\d\.]', '', raw_amount.replace(',', ''))
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        float_val = float(cleaned)
        if 1 <= float_val <= 999999999:  # ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            return f"{float_val:.2f}"
        return ""
    except (ValueError, TypeError):
        return ""

def extract_data_from_ocr_text(text):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á"""
    data = {
        'date': '',
        'invoice_number': '',
        'amount': '',
        'raw_matches': {},
        'debug_info': {}
    }
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
    clean_text = re.sub(r'\s+', ' ', text.strip())
    
    # === 1. ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (HH Pattern) ===
    invoice_patterns = [
        r'(?:‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ[‡πà‡∏¥]*|No\.?|Invoice\s*No\.?)[:\s]*([HH]{1,2}\d{6,8})',  # ‡∏°‡∏µ label ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        r'\b(HH\d{6,8})\b',  # HH ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 6-8 ‡∏´‡∏•‡∏±‡∏Å
        r'([H]{2}\d{6,8})',  # HH ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        r'(HH[\s]*\d{6,8})',  # HH ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏±‡πà‡∏ô
    ]
    
    for pattern in invoice_patterns:
        matches = re.findall(pattern, clean_text, re.IGNORECASE)
        if matches:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
            valid_invoices = [m for m in matches if len(re.sub(r'[^A-Z0-9]', '', m)) >= 8]
            if valid_invoices:
                data['invoice_number'] = valid_invoices[0].replace(' ', '')
                data['raw_matches']['invoices_found'] = matches
                break
    
    # === 2. ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (Date Pattern) ===
    date_patterns = [
        r'(?:‡∏ß‡∏±‡∏ô‡∏ó‡∏µ[‡πà‡∏¥]*|Date)[:\s]*(\d{1,2}/\d{1,2}/\d{2,4})',  # ‡∏°‡∏µ label
        r'\b(\d{1,2}/\d{1,2}/\d{2})\b',  # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YY
        r'(\d{2}/\d{2}/\d{2})',  # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YY ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        r'(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})',  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á / ‡πÅ‡∏•‡∏∞ -
    ]
    
    for pattern in date_patterns:
        matches = re.findall(pattern, clean_text, re.IGNORECASE)
        if matches:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            valid_dates = []
            for date_str in matches:
                if re.match(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}$', date_str):
                    # ‡πÅ‡∏õ‡∏•‡∏á - ‡πÄ‡∏õ‡πá‡∏ô /
                    normalized_date = date_str.replace('-', '/')
                    valid_dates.append(normalized_date)
            
            if valid_dates:
                data['date'] = valid_dates[0]
                data['raw_matches']['dates_found'] = matches
                break
    
    # === 3. ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô (Amount Pattern) - ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ===
    amount_patterns = [
        # Pattern 1: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ‡∏´‡∏£‡∏∑‡∏≠ "Product Value"
        r'(?:‡∏°‡∏π‡∏•‡∏Ñ[‡πà‡∏≤]*‡∏™‡∏¥‡∏ô‡∏Ñ[‡πâ‡∏≤]*|Product\s*Value)[:\s]*([,\d]+\.?\d{0,2})',
        
        # Pattern 2: ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤"
        r'‡∏°‡∏π‡∏•‡∏Ñ[‡πà‡∏≤]*[^0-9\n]*([,\d]+\.\d{2})',
        
        # Pattern 3: ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏©‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "VAT"
        r'([,\d]+\.\d{2})\s*(?:‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏©‡∏µ|VAT|7\.00\s*%)',
        
        # Pattern 4: ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á "‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î" ‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô "VAT"
        r'(?:‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î|Discount)[\s\S]*?([,\d]+\.\d{2})[\s\S]*?(?:VAT|‡∏†‡∏≤‡∏©‡∏µ)',
        
        # Pattern 5: ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        r'\b([,\d]{4,}\.\d{2})\b',
        
        # Pattern 6: ‡∏´‡∏≤‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó subtotal ‡∏´‡∏£‡∏∑‡∏≠ net amount
        r'(?:‡∏£‡∏ß‡∏°|Total|Net|Sub)[^0-9]*([,\d]+\.\d{2})',
    ]
    
    found_amounts = []
    
    for i, pattern in enumerate(amount_patterns):
        matches = re.findall(pattern, clean_text, re.IGNORECASE | re.DOTALL)
        for match in matches:
            cleaned_amount = clean_amount(match)
            if cleaned_amount:
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å pattern ‡πÑ‡∏´‡∏ô
                found_amounts.append({
                    'amount': cleaned_amount,
                    'raw': match,
                    'pattern': i + 1,
                    'numeric_value': float(cleaned_amount)
                })
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if found_amounts:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° pattern priority ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        found_amounts.sort(key=lambda x: (x['pattern'], -x['numeric_value']))
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ pattern ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        best_amount = found_amounts[0]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if 100 <= best_amount['numeric_value'] <= 100000:  # ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
            data['amount'] = best_amount['amount']
        
        data['raw_matches']['amounts_found'] = [amt['raw'] for amt in found_amounts[:5]]  # ‡πÄ‡∏Å‡πá‡∏ö 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
        data['debug_info']['amount_details'] = found_amounts[:3]  # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    
    return data

def create_excel_template():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel Template"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Invoice_Data"
    
    # Header
    headers = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
    for col, header in enumerate(headers, 1):
        ws.cell(row=1, column=col, value=header)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def fill_excel_with_data(data_list):
    """‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å List of Dictionaries
    df_data = pd.DataFrame(data_list)
    
    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
    df_data = df_data.sort_values(by='page_number').reset_index(drop=True)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        df_to_excel = df_data[['date', 'invoice_number', 'amount']].copy()
        df_to_excel.insert(0, '‡∏•‡∏≥‡∏î‡∏±‡∏ö', df_to_excel.index + 1)
        
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        df_to_excel.columns = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
        
        df_to_excel.to_excel(writer, index=False, sheet_name='Invoice_Data')
    
    output.seek(0)
    return output

def main():
    st.set_page_config(
        page_title="Enhanced PDF OCR Extractor",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üîç Enhanced PDF OCR Extractor - High Accuracy")
    st.markdown("**‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢**")
    st.markdown("---")
    
    # Initialize session state
    if 'ocr_results' not in st.session_state:
        st.session_state.ocr_results = []
    if 'extracted_data' not in st.session_state:
        st.session_state.extracted_data = []
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        st.markdown("""
        1. üìÅ **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF**
        2. üöÄ **‡∏Å‡∏î '‡πÄ‡∏£‡∏¥‡πà‡∏° OCR ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á'**
        3. ‚úèÔ∏è **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç**
        4. üíæ **‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel**
        """)
        
        st.markdown("---")
        st.markdown("### üéØ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà:")
        st.markdown("""
        ‚úÖ **PIL Image Processing**
        - Auto Contrast Enhancement
        - Edge Detection & Sharpening
        - Brightness & Contrast Optimization
        - Multi-layer Filtering
        
        ‚úÖ **Multi-Pattern Recognition**
        - ‡∏´‡∏•‡∏≤‡∏¢ OCR Config
        - Confidence Scoring
        - Pattern Priority
        - Smart Validation
        """)
        
        st.markdown("### üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.markdown("""
        - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** DD/MM/YY
        - **‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:** HHxxxxxxx
        - **‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤:** xxxx.xx
        """)
    
    # === Step 1: Upload PDF ===
    st.header("1. üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF")
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF",
        type="pdf",
        help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)"
    )
    
    if uploaded_file is not None:
        col1, col2 = st.columns([2, 3])
        with col1:
            st.success(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}")
            file_size = len(uploaded_file.getvalue()) / (1024 * 1024)
            st.info(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î: {file_size:.1f} MB")
        
        with col2:
            if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á OCR ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á", type="primary", use_container_width=True):
                with st.spinner("‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡∏î‡πâ‡∏ß‡∏¢ AI OCR..."):
                    pdf_bytes = uploaded_file.getvalue()
                    st.session_state.ocr_results = extract_ocr_from_pdf(pdf_bytes)
        
        # === Step 2: Display OCR Results ===
        if st.session_state.ocr_results:
            st.success(f"‚úÖ OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {len(st.session_state.ocr_results)} ‡∏´‡∏ô‡πâ‡∏≤")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ confidence
            avg_confidence = sum([r.get('confidence', 0) for r in st.session_state.ocr_results]) / len(st.session_state.ocr_results)
            st.info(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_confidence:.1f}%")
            
            st.header("2. üëÅÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            st.warning("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'")
            
            # === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ ===
            for result in st.session_state.ocr_results:
                page_key = result['page_number']
                confidence = result.get('confidence', 0)
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OCR
                extracted = extract_data_from_ocr_text(result['ocr_text'])
                
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
                saved_data = next((d for d in st.session_state.extracted_data if d['page_number'] == page_key), None)
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á expander ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                status_icon = "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß" if saved_data else "‚úèÔ∏è ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
                confidence_badge = f"üéØ {confidence:.1f}%" if confidence > 0 else ""
                
                with st.expander(f"üìÑ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {page_key} | {status_icon} | {confidence_badge}", expanded=not saved_data):
                    
                    col1, col2 = st.columns([1, 1])
                    
                    with col1:
                        st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:")
                        
                        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å OCR ‡πÉ‡∏´‡∏°‡πà
                        initial_date = saved_data['date'] if saved_data else extracted['date']
                        initial_invoice = saved_data['invoice_number'] if saved_data else extracted['invoice_number']
                        initial_amount = saved_data['amount'] if saved_data else extracted['amount']
                        
                        # === Input Fields ===
                        date_value = st.text_input(
                            "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:",
                            value=initial_date,
                            help="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: DD/MM/YY ‡πÄ‡∏ä‡πà‡∏ô 01/08/68",
                            key=f"date_{page_key}"
                        )
                        
                        invoice_value = st.text_input(
                            "üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•:",
                            value=initial_invoice,
                            help="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: HHxxxxxxx ‡πÄ‡∏ä‡πà‡∏ô HH6800470",
                            key=f"invoice_{page_key}"
                        )
                        
                        amount_value = st.text_input(
                            "üí∞ ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT:",
                            value=initial_amount,
                            help="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: xxxx.xx ‡πÄ‡∏ä‡πà‡∏ô 4710.28",
                            key=f"amount_{page_key}"
                        )
                        
                        # === Save Button ===
                        if st.button(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ {page_key}", key=f"save_{page_key}", type="primary", use_container_width=True):
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            existing_index = next((i for i, data in enumerate(st.session_state.extracted_data) if data['page_number'] == page_key), None)
                            
                            page_data = {
                                'page_number': page_key,
                                'date': date_value.strip(),
                                'invoice_number': invoice_value.strip(),
                                'amount': amount_value.strip()
                            }
                            
                            if existing_index is not None:
                                st.session_state.extracted_data[existing_index] = page_data
                            else:
                                st.session_state.extracted_data.append(page_data)
                            
                            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ {page_key} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                            st.rerun()
                    
                    with col2:
                        st.subheader("üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß:")
                        st.image(result['image'], use_container_width=True)
                        
                        # === Debug Information ===
                        with st.expander("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug & OCR Text"):
                            st.text_area(
                                "OCR Raw Text:",
                                result['ocr_text'][:1000] + "..." if len(result['ocr_text']) > 1000 else result['ocr_text'],
                                height=200,
                                key=f"ocr_debug_{page_key}"
                            )
                            
                            if extracted['debug_info']:
                                st.json(extracted['debug_info'])
                            
                            if extracted['raw_matches']:
                                st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö:**")
                                st.json(extracted['raw_matches'])
            
            # === Step 3: Create Excel ===
            if st.session_state.extracted_data:
                st.header("3. üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                df_summary = pd.DataFrame(st.session_state.extracted_data)
                df_summary = df_summary.sort_values(by='page_number').reset_index(drop=True)
                df_display = df_summary[['page_number', 'date', 'invoice_number', 'amount']].copy()
                df_display.columns = ['‡∏´‡∏ô‡πâ‡∏≤', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•', '‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô VAT']
                
                st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:")
                st.dataframe(df_display, use_container_width=True, height=300)
                
                # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", len(df_summary))
                with col2:
                    valid_amounts = len([d for d in st.session_state.extracted_data if d['amount']])
                    st.metric("‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô", valid_amounts)
                with col3:
                    try:
                        total_amount = sum([float(d['amount']) for d in st.session_state.extracted_data if d['amount']])
                        st.metric("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_amount:,.2f}")
                    except:
                        st.metric("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ")
                
                # === Download Button ===
                st.markdown("---")
                excel_file = fill_excel_with_data(st.session_state.extracted_data)
                
                st.download_button(
                    label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (Final)",
                    data=excel_file,
                    file_name=f"Enhanced_Invoice_Data_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary",
                    use_container_width=True
                )
        
    else:
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        # ‡πÅ‡∏™‡∏î‡∏á Template Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        st.header("üìã ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel Template")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown("""
            **‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:**
            - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template Excel ‡πÄ‡∏õ‡∏•‡πà‡∏≤
            - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ AI ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            """)
        
        with col2:
            template_file = create_excel_template()
            st.download_button(
                label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template",
                data=template_file,
                file_name="Invoice_Template.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

if __name__ == "__main__":
    main()
